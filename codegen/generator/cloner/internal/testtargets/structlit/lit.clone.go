// Code generated by github.com/ngicks/go-codegen/codegen DO NOT EDIT.
// to regenerate the code, refer to help by invoking
// go run github.com/ngicks/go-codegen/codegen cloner --help

package structlit

//codegen:generated
func (v A[T]) CloneFunc(cloneT func(T) T) A[T] {
	return A[T]{
		A: v.A,
		B: func(v struct {
			Foo string
			Bar *[]struct {
				Baz B
				Qux string
			}
		}) struct {
			Foo string
			Bar *[]struct {
				Baz B
				Qux string
			}
		} {
			return struct {
				Foo string
				Bar *[]struct {
					Baz B
					Qux string
				}
			}{
				Foo: v.Foo,
				Bar: func(v *[]struct {
					Baz B
					Qux string
				}) *[]struct {
					Baz B
					Qux string
				} {
					var out *[]struct {
						Baz B
						Qux string
					}

					inner := out
					if v != nil {
						v := *v
						outer := &inner
						var inner []struct {
							Baz B
							Qux string
						}
						if v != nil {
							inner = make([]struct {
								Baz B
								Qux string
							}, len(v), cap(v))
						}
						for k, v := range v {
							inner[k] = func(v struct {
								Baz B
								Qux string
							}) struct {
								Baz B
								Qux string
							} {
								return struct {
									Baz B
									Qux string
								}{
									Baz: v.Baz.Clone(),
									Qux: v.Qux,
								}
							}(v)
						}
						(*outer) = &inner
					}
					out = inner

					return out
				}(v.Bar),
			}
		}(v.B),
		C: func(v struct{ A T }) struct{ A T } {
			return struct{ A T }{
				A: cloneT(v.A),
			}
		}(v.C),
	}
}

//codegen:generated
func (v B) Clone() B {
	return B{
		B: v.B,
	}
}

//codegen:generated
func (v C) Clone() C {
	return C{
		Foo: v.Foo,
	}
}
