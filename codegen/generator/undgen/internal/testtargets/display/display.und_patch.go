// Code generated by github.com/ngicks/go-codegen/codegen DO NOT EDIT.
// to regenerate the code, refer to help by invoking
// go run github.com/ngicks/go-codegen/codegen undgen patch --help

package display

import (
	"github.com/ngicks/und"
	"github.com/ngicks/und/elastic"
	"github.com/ngicks/und/option"
	"github.com/ngicks/und/sliceund"
	sliceelastic "github.com/ngicks/und/sliceund/elastic"
)

//codegen:generated
type PatchExamplePatch struct {
	Foo sliceund.Und[string]   `json:",omitempty"`
	Bar sliceund.Und[*int]     `json:",omitempty"`
	Baz sliceund.Und[[]string] `json:"baz,omitempty"`
}

//codegen:generated
func (p *PatchExamplePatch) FromValue(v PatchExample) {
	//nolint
	*p = PatchExamplePatch{
		Foo: sliceund.Defined(v.Foo),
		Bar: sliceund.Defined(v.Bar),
		Baz: sliceund.Defined(v.Baz),
	}
}

//codegen:generated
func (p PatchExamplePatch) ToValue() PatchExample {
	//nolint
	return PatchExample{
		Foo: p.Foo.Value(),
		Bar: p.Bar.Value(),
		Baz: p.Baz.Value(),
	}
}

//codegen:generated
func (p PatchExamplePatch) Merge(r PatchExamplePatch) PatchExamplePatch {
	//nolint
	return PatchExamplePatch{
		Foo: sliceund.FromOption(r.Foo.Unwrap().Or(p.Foo.Unwrap())),
		Bar: sliceund.FromOption(r.Bar.Unwrap().Or(p.Bar.Unwrap())),
		Baz: sliceund.FromOption(r.Baz.Unwrap().Or(p.Baz.Unwrap())),
	}
}

//codegen:generated
func (p PatchExamplePatch) ApplyPatch(v PatchExample) PatchExample {
	var orgP PatchExamplePatch
	orgP.FromValue(v)
	merged := orgP.Merge(p)
	return merged.ToValue()
}

//codegen:generated
type ExamplePatch struct {
	Foo    sliceund.Und[string]         `json:",omitempty"`
	Bar    sliceund.Und[string]         `json:",omitempty"` // no tag
	Baz    sliceund.Und[string]         `und:"def" json:",omitempty"`
	Qux    und.Und[string]              `und:"def,und" json:",omitzero"`
	Quux   elastic.Elastic[string]      `und:"null,len==3" json:",omitzero"`
	Corge  sliceund.Und[string]         `und:"nullish" json:",omitempty"`
	Grault sliceelastic.Elastic[string] `und:"und,len>=2,values:nonnull" json:",omitempty"`
}

//codegen:generated
func (p *ExamplePatch) FromValue(v Example) {
	//nolint
	*p = ExamplePatch{
		Foo:    sliceund.Defined(v.Foo),
		Bar:    option.MapOr(v.Bar, sliceund.Null[string](), sliceund.Defined[string]),
		Baz:    option.MapOr(v.Baz, sliceund.Null[string](), sliceund.Defined[string]),
		Qux:    v.Qux,
		Quux:   v.Quux,
		Corge:  v.Corge,
		Grault: v.Grault,
	}
}

//codegen:generated
func (p ExamplePatch) ToValue() Example {
	//nolint
	return Example{
		Foo:    p.Foo.Value(),
		Bar:    option.Flatten(p.Bar.Unwrap()),
		Baz:    option.Flatten(p.Baz.Unwrap()),
		Qux:    p.Qux,
		Quux:   p.Quux,
		Corge:  p.Corge,
		Grault: p.Grault,
	}
}

//codegen:generated
func (p ExamplePatch) Merge(r ExamplePatch) ExamplePatch {
	//nolint
	return ExamplePatch{
		Foo:    sliceund.FromOption(r.Foo.Unwrap().Or(p.Foo.Unwrap())),
		Bar:    sliceund.FromOption(r.Bar.Unwrap().Or(p.Bar.Unwrap())),
		Baz:    sliceund.FromOption(r.Baz.Unwrap().Or(p.Baz.Unwrap())),
		Qux:    und.FromOption(r.Qux.Unwrap().Or(p.Qux.Unwrap())),
		Quux:   elastic.FromUnd(und.FromOption(r.Quux.Unwrap().Unwrap().Or(p.Quux.Unwrap().Unwrap()))),
		Corge:  sliceund.FromOption(r.Corge.Unwrap().Or(p.Corge.Unwrap())),
		Grault: sliceelastic.FromUnd(sliceund.FromOption(r.Grault.Unwrap().Unwrap().Or(p.Grault.Unwrap().Unwrap()))),
	}
}

//codegen:generated
func (p ExamplePatch) ApplyPatch(v Example) Example {
	var orgP ExamplePatch
	orgP.FromValue(v)
	merged := orgP.Merge(p)
	return merged.ToValue()
}

//codegen:generated
type DependentPatch struct {
	Foo sliceund.Und[Example] `json:",omitempty"`
	Bar sliceund.Und[Example] `und:"required" json:",omitempty"`
}

//codegen:generated
func (p *DependentPatch) FromValue(v Dependent) {
	//nolint
	*p = DependentPatch{
		Foo: sliceund.Defined(v.Foo),
		Bar: v.Bar,
	}
}

//codegen:generated
func (p DependentPatch) ToValue() Dependent {
	//nolint
	return Dependent{
		Foo: p.Foo.Value(),
		Bar: p.Bar,
	}
}

//codegen:generated
func (p DependentPatch) Merge(r DependentPatch) DependentPatch {
	//nolint
	return DependentPatch{
		Foo: sliceund.FromOption(r.Foo.Unwrap().Or(p.Foo.Unwrap())),
		Bar: sliceund.FromOption(r.Bar.Unwrap().Or(p.Bar.Unwrap())),
	}
}

//codegen:generated
func (p DependentPatch) ApplyPatch(v Dependent) Dependent {
	var orgP DependentPatch
	orgP.FromValue(v)
	merged := orgP.Merge(p)
	return merged.ToValue()
}
